{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { MultimodalLiveClient } from '../lib/multimodal-live-client.ts';\nimport { AudioStreamer } from '../lib/AudioStreamer.ts';\nimport { audioContext } from '../lib/utils.ts';\nconst BASE_CONFIG = {\n  model: 'models/gemini-live-2.5-flash-preview',\n  generationConfig: {\n    responseModalities: 'audio',\n    speechConfig: {\n      voiceConfig: {\n        prebuiltVoiceConfig: {\n          voiceName: 'Aoede'\n        }\n      }\n    }\n  }\n};\nexport function useLiveAPI({\n  url,\n  apiKey\n}) {\n  _s();\n  const client = useMemo(() => new MultimodalLiveClient({\n    url,\n    apiKey\n  }), [url, apiKey]);\n  const audioStreamerRef = useRef(null);\n  const [connected, setConnected] = useState(false);\n  const [config, setConfig] = useState(BASE_CONFIG);\n  const [volume, setVolume] = useState(0);\n\n  // register audio for streaming server -> speakers\n  useEffect(() => {\n    if (!audioStreamerRef.current) {\n      // Create audio context with 24kHz sample rate to match AudioStreamer\n      audioContext({\n        id: 'audio-out',\n        sampleRate: 24000\n      }).then(audioCtx => {\n        audioStreamerRef.current = new AudioStreamer(audioCtx);\n        // Set up completion callback\n        audioStreamerRef.current.onComplete = () => {\n          console.log('🔇 Audio playback completed');\n        };\n      });\n    }\n  }, [audioStreamerRef]);\n  useEffect(() => {\n    console.log('🎧 [useLiveAPI] Setting up client event handlers...');\n    const onClose = () => {\n      console.log('🔌 [useLiveAPI] Client connection closed');\n      setConnected(false);\n    };\n    const stopAudioStreamer = () => {\n      var _audioStreamerRef$cur;\n      console.log('🔇 [useLiveAPI] Stopping audio streamer on interrupt');\n      (_audioStreamerRef$cur = audioStreamerRef.current) === null || _audioStreamerRef$cur === void 0 ? void 0 : _audioStreamerRef$cur.stop();\n    };\n    const onAudio = data => {\n      if (audioStreamerRef.current) {\n        // Resume audio context if needed\n        audioStreamerRef.current.resume();\n        // Add the audio data\n        audioStreamerRef.current.addPCM16(new Uint8Array(data));\n      }\n    };\n    console.log('📡 [useLiveAPI] Registering client event listeners...');\n    client.on('close', onClose).on('interrupted', stopAudioStreamer).on('audio', onAudio);\n    return () => {\n      console.log('🧹 [useLiveAPI] Cleaning up client event listeners...');\n      client.off('close', onClose).off('interrupted', stopAudioStreamer).off('audio', onAudio);\n    };\n  }, [client]);\n  const connect = useCallback(async () => {\n    console.log('🔌 [useLiveAPI] Connect function called');\n    console.log('📋 [useLiveAPI] Config:', config);\n    console.log('🔌 [useLiveAPI] Current connected state:', connected);\n    if (!config) {\n      console.error('❌ [useLiveAPI] No config available!');\n      throw new Error('config has not been set');\n    }\n    console.log('🔌 [useLiveAPI] Disconnecting existing connection...');\n    client.disconnect();\n    try {\n      console.log('🚀 [useLiveAPI] Starting new connection...');\n      await client.connect(config);\n      console.log('✅ [useLiveAPI] Connection established, setting connected=true');\n      setConnected(true);\n    } catch (error) {\n      console.error('❌ [useLiveAPI] Client connection failed:', error);\n      console.error('🔍 [useLiveAPI] Error type:', typeof error);\n      console.error('🔍 [useLiveAPI] Error message:', error instanceof Error ? error.message : 'Unknown error');\n      setConnected(false);\n      throw error;\n    }\n  }, [client, setConnected, config, connected]);\n  const disconnect = useCallback(async () => {\n    console.log('🔌 [useLiveAPI] Disconnect function called');\n    console.log('🔌 [useLiveAPI] Current connected state:', connected);\n    client.disconnect();\n    console.log('✅ [useLiveAPI] Disconnected, setting connected=false');\n    setConnected(false);\n  }, [setConnected, client, connected]);\n  const updateConfig = useCallback(newConfig => {\n    console.log('🔄 [useLiveAPI] Updating config on active connection...');\n    const mergedConfig = {\n      ...BASE_CONFIG,\n      ...newConfig\n    };\n    try {\n      client.updateConfig(mergedConfig);\n      setConfig(mergedConfig);\n      console.log('✅ [useLiveAPI] Config updated successfully');\n    } catch (error) {\n      console.error('❌ [useLiveAPI] Failed to update config:', error);\n      throw error;\n    }\n  }, [client, setConfig]);\n  const sendText = useCallback(message => {\n    console.log('📤 [useLiveAPI] Sending text message:', message);\n    try {\n      client.send([{\n        text: message\n      }]);\n      console.log('✅ [useLiveAPI] Text message sent successfully');\n    } catch (error) {\n      console.error('❌ [useLiveAPI] Failed to send text message:', error);\n      throw error;\n    }\n  }, [client]);\n  return {\n    client,\n    config,\n    setConfig,\n    updateConfig,\n    sendText,\n    connected,\n    connect,\n    disconnect,\n    volume\n  };\n}\n_s(useLiveAPI, \"UvNPq3Hv/GeyfyIsAod6RLi51fw=\");","map":{"version":3,"names":["useCallback","useEffect","useMemo","useRef","useState","MultimodalLiveClient","AudioStreamer","audioContext","BASE_CONFIG","model","generationConfig","responseModalities","speechConfig","voiceConfig","prebuiltVoiceConfig","voiceName","useLiveAPI","url","apiKey","_s","client","audioStreamerRef","connected","setConnected","config","setConfig","volume","setVolume","current","id","sampleRate","then","audioCtx","onComplete","console","log","onClose","stopAudioStreamer","_audioStreamerRef$cur","stop","onAudio","data","resume","addPCM16","Uint8Array","on","off","connect","error","Error","disconnect","message","updateConfig","newConfig","mergedConfig","sendText","send","text"],"sources":["/Users/gagandeep.singh/Downloads/trp-main-feature-voice-first-ui/frontend2/src/hooks/useLiveApi.ts"],"sourcesContent":["import { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport {\n    MultimodalLiveAPIClientConnection,\n    MultimodalLiveClient,\n} from '../lib/multimodal-live-client.ts';\nimport { LiveConfig } from '../types/multimodal-live-types.ts';\nimport { AudioStreamer } from '../lib/AudioStreamer.ts';\nimport { audioContext } from '../lib/utils.ts';\n\nexport type UseLiveAPIResults = {\n    client: MultimodalLiveClient;\n    setConfig: (config: LiveConfig) => void;\n    updateConfig: (config: LiveConfig) => void;\n    sendText: (message: string) => void;\n    config: LiveConfig;\n    connected: boolean;\n    connect: () => Promise<void>;\n    disconnect: () => Promise<void>;\n    volume: number;\n};\n\nconst BASE_CONFIG: LiveConfig = {\n    model: 'models/gemini-live-2.5-flash-preview',\n    generationConfig: {\n        responseModalities: 'audio',\n        speechConfig: {\n            voiceConfig: { prebuiltVoiceConfig: { voiceName: 'Aoede' } },\n        },\n    },\n};\n\nexport function useLiveAPI({\n    url,\n    apiKey,\n}: MultimodalLiveAPIClientConnection): UseLiveAPIResults {\n    const client = useMemo(\n        () => new MultimodalLiveClient({ url, apiKey }),\n        [url, apiKey]\n    );\n    const audioStreamerRef = useRef<AudioStreamer | null>(null);\n\n    const [connected, setConnected] = useState(false);\n    const [config, setConfig] = useState<LiveConfig>(BASE_CONFIG);\n    const [volume, setVolume] = useState(0);\n\n    // register audio for streaming server -> speakers\n    useEffect(() => {\n        if (!audioStreamerRef.current) {\n            // Create audio context with 24kHz sample rate to match AudioStreamer\n            audioContext({ id: 'audio-out', sampleRate: 24000 }).then((audioCtx: AudioContext) => {\n                audioStreamerRef.current = new AudioStreamer(audioCtx);\n                // Set up completion callback\n                audioStreamerRef.current.onComplete = () => {\n                    console.log('🔇 Audio playback completed');\n                };\n            });\n        }\n    }, [audioStreamerRef]);\n\n    useEffect(() => {\n        console.log('🎧 [useLiveAPI] Setting up client event handlers...');\n\n        const onClose = () => {\n            console.log('🔌 [useLiveAPI] Client connection closed');\n            setConnected(false);\n        };\n\n        const stopAudioStreamer = () => {\n            console.log('🔇 [useLiveAPI] Stopping audio streamer on interrupt');\n            audioStreamerRef.current?.stop();\n        };\n\n        const onAudio = (data: ArrayBuffer) => {\n            if (audioStreamerRef.current) {\n                // Resume audio context if needed\n                audioStreamerRef.current.resume();\n                // Add the audio data\n                audioStreamerRef.current.addPCM16(new Uint8Array(data));\n            }\n        };\n\n        console.log('📡 [useLiveAPI] Registering client event listeners...');\n        client\n            .on('close', onClose)\n            .on('interrupted', stopAudioStreamer)\n            .on('audio', onAudio);\n\n        return () => {\n            console.log(\n                '🧹 [useLiveAPI] Cleaning up client event listeners...'\n            );\n            client\n                .off('close', onClose)\n                .off('interrupted', stopAudioStreamer)\n                .off('audio', onAudio);\n        };\n    }, [client]);\n\n    const connect = useCallback(async () => {\n        console.log('🔌 [useLiveAPI] Connect function called');\n        console.log('📋 [useLiveAPI] Config:', config);\n        console.log('🔌 [useLiveAPI] Current connected state:', connected);\n\n        if (!config) {\n            console.error('❌ [useLiveAPI] No config available!');\n            throw new Error('config has not been set');\n        }\n\n        console.log('🔌 [useLiveAPI] Disconnecting existing connection...');\n        client.disconnect();\n\n        try {\n            console.log('🚀 [useLiveAPI] Starting new connection...');\n            await client.connect(config);\n            console.log(\n                '✅ [useLiveAPI] Connection established, setting connected=true'\n            );\n            setConnected(true);\n        } catch (error) {\n            console.error('❌ [useLiveAPI] Client connection failed:', error);\n            console.error('🔍 [useLiveAPI] Error type:', typeof error);\n            console.error(\n                '🔍 [useLiveAPI] Error message:',\n                error instanceof Error ? error.message : 'Unknown error'\n            );\n            setConnected(false);\n            throw error;\n        }\n    }, [client, setConnected, config, connected]);\n\n    const disconnect = useCallback(async () => {\n        console.log('🔌 [useLiveAPI] Disconnect function called');\n        console.log('🔌 [useLiveAPI] Current connected state:', connected);\n        client.disconnect();\n        console.log('✅ [useLiveAPI] Disconnected, setting connected=false');\n        setConnected(false);\n    }, [setConnected, client, connected]);\n\n    const updateConfig = useCallback((newConfig: LiveConfig) => {\n        console.log('🔄 [useLiveAPI] Updating config on active connection...');\n        \n        const mergedConfig = {\n            ...BASE_CONFIG,\n            ...newConfig,\n        };\n        \n        try {\n            client.updateConfig(mergedConfig);\n            setConfig(mergedConfig);\n            console.log('✅ [useLiveAPI] Config updated successfully');\n        } catch (error) {\n            console.error('❌ [useLiveAPI] Failed to update config:', error);\n            throw error;\n        }\n    }, [client, setConfig]);\n\n    const sendText = useCallback((message: string) => {\n        console.log('📤 [useLiveAPI] Sending text message:', message);\n        try {\n            client.send([{ text: message }]);\n            console.log('✅ [useLiveAPI] Text message sent successfully');\n        } catch (error) {\n            console.error('❌ [useLiveAPI] Failed to send text message:', error);\n            throw error;\n        }\n    }, [client]);\n\n    return {\n        client,\n        config,\n        setConfig,\n        updateConfig,\n        sendText,\n        connected,\n        connect,\n        disconnect,\n        volume,\n    };\n}\n"],"mappings":";AAAA,SAASA,WAAW,EAAEC,SAAS,EAAEC,OAAO,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AACzE,SAEIC,oBAAoB,QACjB,kCAAkC;AAEzC,SAASC,aAAa,QAAQ,yBAAyB;AACvD,SAASC,YAAY,QAAQ,iBAAiB;AAc9C,MAAMC,WAAuB,GAAG;EAC5BC,KAAK,EAAE,sCAAsC;EAC7CC,gBAAgB,EAAE;IACdC,kBAAkB,EAAE,OAAO;IAC3BC,YAAY,EAAE;MACVC,WAAW,EAAE;QAAEC,mBAAmB,EAAE;UAAEC,SAAS,EAAE;QAAQ;MAAE;IAC/D;EACJ;AACJ,CAAC;AAED,OAAO,SAASC,UAAUA,CAAC;EACvBC,GAAG;EACHC;AAC+B,CAAC,EAAqB;EAAAC,EAAA;EACrD,MAAMC,MAAM,GAAGlB,OAAO,CAClB,MAAM,IAAIG,oBAAoB,CAAC;IAAEY,GAAG;IAAEC;EAAO,CAAC,CAAC,EAC/C,CAACD,GAAG,EAAEC,MAAM,CAChB,CAAC;EACD,MAAMG,gBAAgB,GAAGlB,MAAM,CAAuB,IAAI,CAAC;EAE3D,MAAM,CAACmB,SAAS,EAAEC,YAAY,CAAC,GAAGnB,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACoB,MAAM,EAAEC,SAAS,CAAC,GAAGrB,QAAQ,CAAaI,WAAW,CAAC;EAC7D,MAAM,CAACkB,MAAM,EAAEC,SAAS,CAAC,GAAGvB,QAAQ,CAAC,CAAC,CAAC;;EAEvC;EACAH,SAAS,CAAC,MAAM;IACZ,IAAI,CAACoB,gBAAgB,CAACO,OAAO,EAAE;MAC3B;MACArB,YAAY,CAAC;QAAEsB,EAAE,EAAE,WAAW;QAAEC,UAAU,EAAE;MAAM,CAAC,CAAC,CAACC,IAAI,CAAEC,QAAsB,IAAK;QAClFX,gBAAgB,CAACO,OAAO,GAAG,IAAItB,aAAa,CAAC0B,QAAQ,CAAC;QACtD;QACAX,gBAAgB,CAACO,OAAO,CAACK,UAAU,GAAG,MAAM;UACxCC,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;QAC9C,CAAC;MACL,CAAC,CAAC;IACN;EACJ,CAAC,EAAE,CAACd,gBAAgB,CAAC,CAAC;EAEtBpB,SAAS,CAAC,MAAM;IACZiC,OAAO,CAACC,GAAG,CAAC,qDAAqD,CAAC;IAElE,MAAMC,OAAO,GAAGA,CAAA,KAAM;MAClBF,OAAO,CAACC,GAAG,CAAC,0CAA0C,CAAC;MACvDZ,YAAY,CAAC,KAAK,CAAC;IACvB,CAAC;IAED,MAAMc,iBAAiB,GAAGA,CAAA,KAAM;MAAA,IAAAC,qBAAA;MAC5BJ,OAAO,CAACC,GAAG,CAAC,sDAAsD,CAAC;MACnE,CAAAG,qBAAA,GAAAjB,gBAAgB,CAACO,OAAO,cAAAU,qBAAA,uBAAxBA,qBAAA,CAA0BC,IAAI,CAAC,CAAC;IACpC,CAAC;IAED,MAAMC,OAAO,GAAIC,IAAiB,IAAK;MACnC,IAAIpB,gBAAgB,CAACO,OAAO,EAAE;QAC1B;QACAP,gBAAgB,CAACO,OAAO,CAACc,MAAM,CAAC,CAAC;QACjC;QACArB,gBAAgB,CAACO,OAAO,CAACe,QAAQ,CAAC,IAAIC,UAAU,CAACH,IAAI,CAAC,CAAC;MAC3D;IACJ,CAAC;IAEDP,OAAO,CAACC,GAAG,CAAC,uDAAuD,CAAC;IACpEf,MAAM,CACDyB,EAAE,CAAC,OAAO,EAAET,OAAO,CAAC,CACpBS,EAAE,CAAC,aAAa,EAAER,iBAAiB,CAAC,CACpCQ,EAAE,CAAC,OAAO,EAAEL,OAAO,CAAC;IAEzB,OAAO,MAAM;MACTN,OAAO,CAACC,GAAG,CACP,uDACJ,CAAC;MACDf,MAAM,CACD0B,GAAG,CAAC,OAAO,EAAEV,OAAO,CAAC,CACrBU,GAAG,CAAC,aAAa,EAAET,iBAAiB,CAAC,CACrCS,GAAG,CAAC,OAAO,EAAEN,OAAO,CAAC;IAC9B,CAAC;EACL,CAAC,EAAE,CAACpB,MAAM,CAAC,CAAC;EAEZ,MAAM2B,OAAO,GAAG/C,WAAW,CAAC,YAAY;IACpCkC,OAAO,CAACC,GAAG,CAAC,yCAAyC,CAAC;IACtDD,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEX,MAAM,CAAC;IAC9CU,OAAO,CAACC,GAAG,CAAC,0CAA0C,EAAEb,SAAS,CAAC;IAElE,IAAI,CAACE,MAAM,EAAE;MACTU,OAAO,CAACc,KAAK,CAAC,qCAAqC,CAAC;MACpD,MAAM,IAAIC,KAAK,CAAC,yBAAyB,CAAC;IAC9C;IAEAf,OAAO,CAACC,GAAG,CAAC,sDAAsD,CAAC;IACnEf,MAAM,CAAC8B,UAAU,CAAC,CAAC;IAEnB,IAAI;MACAhB,OAAO,CAACC,GAAG,CAAC,4CAA4C,CAAC;MACzD,MAAMf,MAAM,CAAC2B,OAAO,CAACvB,MAAM,CAAC;MAC5BU,OAAO,CAACC,GAAG,CACP,+DACJ,CAAC;MACDZ,YAAY,CAAC,IAAI,CAAC;IACtB,CAAC,CAAC,OAAOyB,KAAK,EAAE;MACZd,OAAO,CAACc,KAAK,CAAC,0CAA0C,EAAEA,KAAK,CAAC;MAChEd,OAAO,CAACc,KAAK,CAAC,6BAA6B,EAAE,OAAOA,KAAK,CAAC;MAC1Dd,OAAO,CAACc,KAAK,CACT,gCAAgC,EAChCA,KAAK,YAAYC,KAAK,GAAGD,KAAK,CAACG,OAAO,GAAG,eAC7C,CAAC;MACD5B,YAAY,CAAC,KAAK,CAAC;MACnB,MAAMyB,KAAK;IACf;EACJ,CAAC,EAAE,CAAC5B,MAAM,EAAEG,YAAY,EAAEC,MAAM,EAAEF,SAAS,CAAC,CAAC;EAE7C,MAAM4B,UAAU,GAAGlD,WAAW,CAAC,YAAY;IACvCkC,OAAO,CAACC,GAAG,CAAC,4CAA4C,CAAC;IACzDD,OAAO,CAACC,GAAG,CAAC,0CAA0C,EAAEb,SAAS,CAAC;IAClEF,MAAM,CAAC8B,UAAU,CAAC,CAAC;IACnBhB,OAAO,CAACC,GAAG,CAAC,sDAAsD,CAAC;IACnEZ,YAAY,CAAC,KAAK,CAAC;EACvB,CAAC,EAAE,CAACA,YAAY,EAAEH,MAAM,EAAEE,SAAS,CAAC,CAAC;EAErC,MAAM8B,YAAY,GAAGpD,WAAW,CAAEqD,SAAqB,IAAK;IACxDnB,OAAO,CAACC,GAAG,CAAC,yDAAyD,CAAC;IAEtE,MAAMmB,YAAY,GAAG;MACjB,GAAG9C,WAAW;MACd,GAAG6C;IACP,CAAC;IAED,IAAI;MACAjC,MAAM,CAACgC,YAAY,CAACE,YAAY,CAAC;MACjC7B,SAAS,CAAC6B,YAAY,CAAC;MACvBpB,OAAO,CAACC,GAAG,CAAC,4CAA4C,CAAC;IAC7D,CAAC,CAAC,OAAOa,KAAK,EAAE;MACZd,OAAO,CAACc,KAAK,CAAC,yCAAyC,EAAEA,KAAK,CAAC;MAC/D,MAAMA,KAAK;IACf;EACJ,CAAC,EAAE,CAAC5B,MAAM,EAAEK,SAAS,CAAC,CAAC;EAEvB,MAAM8B,QAAQ,GAAGvD,WAAW,CAAEmD,OAAe,IAAK;IAC9CjB,OAAO,CAACC,GAAG,CAAC,uCAAuC,EAAEgB,OAAO,CAAC;IAC7D,IAAI;MACA/B,MAAM,CAACoC,IAAI,CAAC,CAAC;QAAEC,IAAI,EAAEN;MAAQ,CAAC,CAAC,CAAC;MAChCjB,OAAO,CAACC,GAAG,CAAC,+CAA+C,CAAC;IAChE,CAAC,CAAC,OAAOa,KAAK,EAAE;MACZd,OAAO,CAACc,KAAK,CAAC,6CAA6C,EAAEA,KAAK,CAAC;MACnE,MAAMA,KAAK;IACf;EACJ,CAAC,EAAE,CAAC5B,MAAM,CAAC,CAAC;EAEZ,OAAO;IACHA,MAAM;IACNI,MAAM;IACNC,SAAS;IACT2B,YAAY;IACZG,QAAQ;IACRjC,SAAS;IACTyB,OAAO;IACPG,UAAU;IACVxB;EACJ,CAAC;AACL;AAACP,EAAA,CAnJeH,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}